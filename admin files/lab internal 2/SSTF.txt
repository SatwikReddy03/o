SSTF
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_REQUESTS 100

int abs_diff(int a, int b) {
    return abs(a - b);
}

int find_closest_request(int head, int *requests, bool *visited, int n) {
    int min_diff = INT_MAX;
    int closest_index = -1;

    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            int diff = abs_diff(head, requests[i]);
            if (diff < min_diff) {
                min_diff = diff;
                closest_index = i;
            }
        }
    }

    return closest_index;
}

int main() {
    int n, head, total_movement = 0;
    int requests[MAX_REQUESTS];
    bool visited[MAX_REQUESTS] = {false};

    printf("Enter the number of disk requests: ");
    scanf("%d", &n);

    printf("Enter the initial position of the disk head: ");
    scanf("%d", &head);

    if (n <= 0 || n > MAX_REQUESTS) {
        printf("Invalid number of disk requests!\n");
        return 1;
    }

    printf("Enter the disk request queue: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    // SSTF Disk Scheduling Algorithm
    printf("\nSequence of disk head movements:\n");
    printf("%d ", head);

    for (int i = 0; i < n; i++) {
        int closest_index = find_closest_request(head, requests, visited, n);
        visited[closest_index] = true;

        total_movement += abs_diff(head, requests[closest_index]);
        head = requests[closest_index];
        printf("%d ", head);
    }

    printf("\n\nTotal disk head movements: %d\n", total_movement);

    return 0;
}
